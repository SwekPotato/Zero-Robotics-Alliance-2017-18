//Begin page Counter
//finds position to block other dude
void findIntercept()  
{
    float otherZR[12];
    api.getOtherZRState(otherZR);
 
    mathVecNormalize(otherZR, 3);
    multVec(otherZR, 0.08);
    targetPos[0]=otherZR[0];
    targetPos[1]=otherZR[1];
    targetPos[2]=otherZR[2];
}

// whether we should stop intercepting
bool discardIntercept() 
{
    float otherScore = game.getOtherScore();
    float myScore = game.getScore();
    
    // idk should i add this?
    if (myScore > otherScore && game.getFuelRemaining() < 0.20) {
         return false;
    }
    if (myScore < otherScore) {
        return true;
    }
    // if other ppl's score are very close to ours, and still plenty of time left
    return (myScore-otherScore >= 12.0 && 180-api.getTime() > 20);
}

// if the other people are heading towards base
bool headingBase() 
{
    float otherZR[12];
    api.getOtherZRState(otherZR);
    
    // if they're moving up lmao
    return (otherZR[5] <= -0.02);
}

void positionOffset(float currentPos[3], float offset, float destination[3]) 
{
    float offsetDir[3];
    offsetDir[0] = destination[0] - currentPos[0];
    offsetDir[1] = destination[1] - currentPos[1];
    offsetDir[2] = destination[2] - currentPos[2];
    mathVecNormalize(offsetDir, 3);
    //float offsetTarget[3] = {0};
    for (int i = 0; i < 3; ++i) 
	{
		destination[i] = 0.0f - (offset * offsetDir[i]); 
    }
}

//End page Counter
//Begin page Drill
float targetQuat[4];
float drillAttitude[3];
short sampCount;

// check whether drilling conditions are met 
bool ready() {
    if (fabs(myState[9]) >= 0.04 || fabs(myState[10]) >= 0.04) return false;
    if (fabs(myState[11]) >= 0.04 || fabs(myState[3]) >= 0.01||fabs(myState[4]) >= 0.01) return false;
    if (fabs(myState[5]) >= 0.01 || fabs(targetPos[0]-myState[0]) >= 0.02) return false;
    if (fabs(targetPos[1]-myState[1]) >= 0.02 || fabs(targetPos[2]-myState[2]) >= 0.02) return false;
    return true;
}

bool initDrill(float dest[3]) //get into position to start drilling
{
    float TMP[13];
    api.getMySphState(TMP);
    targetQuat[0]=TMP[6];
    targetQuat[1]=TMP[7];
    targetQuat[2]=0;
    targetQuat[3]=0;
    mathVecNormalize(targetQuat, 2);
    api.setQuatTarget(targetQuat);
    
    targetPos[0] = dest[0];
    targetPos[1] = dest[1];
    targetPos[2] = dest[2];
    moveFaster(targetPos);
    if(ready())
    {
        game.startDrill();
        api.setAttRateTarget(drillAttitude);
        return true;
    }
    return false;
}

bool drill() //actually set angle then move to angle
{
    if (game.getDrillError()) 
    {
       DEBUG(("ERROR"));
       game.stopDrill(); 
       return false;
    }
    api.setPositionTarget(targetPos);
    api.setAttRateTarget(drillAttitude);
        
    //if we have a sample
    if (game.checkSample()) {
        // if we have too many samples
        if (game.getNumSamplesHeld()==5)
            game.dropSample(4);
            
        game.pickupSample();
    }

    return true;
}
//End page Drill
//Begin page Movement
float getMag(float *vel){
    return sqrt(powf(vel[0],2)+powf(vel[1],2)+powf(vel[2],2));
}
void multVec(float *vec, float mult) {
    vec[0] *= mult;
    vec[1] *= mult;
    vec[2] *= mult;
}

// Fastest move function to get where you're going fast
void moveFaster(float *whereTo) {
    float v[3]; //float mult;
    mathVecSubtract(v, whereTo, myState, 3.0f);
    //mult = (1.0+1.0*(getMag(v)/0.6));
    multVec(v, 1.5);
    mathVecAdd(v, myState, v, 3);
    api.setPositionTarget(v);
}
//End page Movement
//Begin page main

float myState[12];      // holds our state variables
bool id;
bool isBlue;            // whether we are blue
bool farm;              // whether we are currently farming
int step;               // step in counter control structure
int counter;
int targetSquare[2];
int targetSquares[4][2]; // Stores 4 locations of squares[x,y]
float targetSquareLoc[2]; // location of target square
float targetPos[3];     // value for holding current pos. target
int factor;
int destCnt;            // counter for myDest
float pos2D[2];         // 2D position for checking geysers
float dest[3];
float baseStation[2][3];// base station while normal or geyser
int tempSquare[3];

void init(){
    api.getMyZRState(myState);
    counter = 0;
    targetSquare[0] = 0;
    targetSquare[1] = 0;
    targetSquares[0][0] = 0;
    targetSquares[0][1] = 0;
    targetSquares[1][0] = 0;
    targetSquares[1][1] = 0;
    targetSquares[2][0] = 0;
    targetSquares[2][1] = 0;
    targetSquares[3][0] = 0;
    targetSquares[3][1] = 0;
    isBlue = (myState[0] > 0);
    factor = (isBlue) ? 1 : -1; // if red then search the other squares that are closest to red location
    DEBUG((" factor %d", factor));
    // for (int i = 1; i < 7; ++i) {
    //     targetSquare[0] = i * factor;
    //     for (int j = 4; j < 9; ++j) {
    //         targetSquare[1] = j * factor;
    //         if (targetSquares[3][1] != 0) {
    //             break;
    //         }
    //         if (game.getTerrainHeight(targetSquare) < 0.43f) {
    //             targetSquares[counter][0] = i * factor;
    //             targetSquares[counter][1] = j * factor;
    //             DEBUG(("High targetSquare: %d %d", targetSquare[0], targetSquare[1]));
    //             DEBUG(("Height %4.3f", game.getTerrainHeight(targetSquare)));
    //             counter++;
    //         }
    //     }
    // }
    for (int j = 4; j < 9; ++j) {
        targetSquare[1] = j * factor;
        for (int i = 1; i < 7; ++i) {
            targetSquare[0] = i * factor;
            if (targetSquares[3][1] != 0) {
                break;
            }
            if (game.getTerrainHeight(targetSquare) < 0.43f) {
                targetSquares[counter][0] = i * factor;
                targetSquares[counter][1] = j * factor;
                DEBUG(("High targetSquare: %d %d", targetSquare[0], targetSquare[1]));
                DEBUG(("Height %4.3f", game.getTerrainHeight(targetSquare)));
                counter++;
            }
        }
    }
	
// 	for (int i = 0; i < 4 && !isBlue; i++)
// 	    myDest[i][0] *= -1, myDest[i][1] *= -1;
	
	// initializing other miscellaneous variables
	drillAttitude[2] = .7, drillAttitude[0] = drillAttitude[1] = 0;
	baseStation[0][0] = baseStation[0][1] = 0, baseStation[0][2] = 0;
	baseStation[1][0] = baseStation[1][1] = 0, baseStation[1][2] = 0.3;
	
	step = 1; destCnt = 0; farm = false;
}

void loop(){
    DEBUG(("%d", step));
	api.getMyZRState(myState);
	
	// 2D position for geysers and stuff
	pos2D[0] = myState[0];
	pos2D[1] = myState[1];
	
	// check conditions for driling
	if(step==1) {
	    DEBUG(("STEP 1"));
	    DEBUG(("targetSquare in step 1: %d %d", targetSquares[0][0], targetSquares[0][1]));
	    tempSquare[0] = targetSquares[destCnt][0];
	    tempSquare[1] = targetSquares[destCnt][1];
	    tempSquare[2] = 5;
	    game.square2pos(tempSquare, dest);
	    dest[2] = .268f;
	    if(initDrill(dest))
	        step = 2;
	}
	
	// begin drilling at position
	if(step==2)
	{
	    //if theres an error, start again
	    if(!drill()) step=1;
	    
	    // few conditions to check whether we stop drilling
	    // a) if the opponent is heading to the base to drop off samples
	    //    and their score is lower than ours; then we work to stop them
	    // b) if we drilled this place for 2 times or there is a geyser at
	    //    our current spot, we go back to base to drop off samples
	    
	    if((headingBase() && game.getOtherScore() < game.getScore()) ||
	        (game.getDrills(pos2D) == 3 || game.isGeyserHere(pos2D)))
	    {
	        game.stopDrill();
	        
	        
	        // determine next spot to drill
	        if (destCnt < 3 && !farm) destCnt += 1;
	        else if (isBlue) targetSquares[destCnt][1] += 0.08;
            else targetSquares[destCnt][1] -= 0.08;
	            
	        // if we are farming, continue drilling
	        // if we are not farming, go back to base
	        if (!farm) {
	           id = game.isGeyserHere(pos2D);
	           positionOffset(&myState[0], 0.16f, baseStation[id]);
	        step = 3; 
	        }
	        else {
	            step = 1;
	        }
	    }
	}
	
	// get to base station
	if(step==3)
	{
	    // try to get back to base station
	    // to drop off samples and initiate
        if (game.getNumSamplesHeld() == 0) {
            moveFaster(baseStation[id]);
            step = 4;
        }
	    moveFaster(baseStation[id]);
	    
	    float attTarget[3];
        attTarget[0] = 0;
        attTarget[1] = 0;
        attTarget[2] = -1; 
        api.setAttitudeTarget(attTarget);
        
        if (game.atBaseStation()) 
        {
            for (int i = 0; i < 5; i++)
                game.dropSample(i);
            step = 4;
        } else if (api.getTime() < 60 && game.getFuelRemaining() < 0.6) {
            // if we did not get to the base station first and
            // we are instead getting intercepted, begin farming
            step = 1; farm = true; // 
        }
	}
	
	// handle interception
	if(step==4)
	{
	    // if opponent ignores base station
	    if (discardIntercept()) step = 1;
	    else {
	        
	       
    	    findIntercept();
    	    moveFaster(targetPos);
    	    DEBUG(("%f, %f, %f", targetPos[0], targetPos[1], targetPos[2]));
	    }
	}
}

//End page main
