//begin page main--------------------------------------------------------------------------------------------------------------------------
float Mystate[12], Mypos[3], MyVirPos[3], Myvel[3], Myatt[3], Myw[3], An0[3], An1[3], S[3], Zero[3], Rilascio[3], Coordinate[6][3], Minatore[3]; 
int n, contatorePerLaRotation, viaggio;

float quaternion[4];

void init(){
    //Ice zone z=0.48
    n = -1;
    contatorePerLaRotation = 0;
    
    viaggio = 0;
    
    api.getMyZRState(Mystate); 
    
    int c = Sign( Mystate[0] );
    
    Coordinate[0][0] = c*0.20f; // 0.20
    Coordinate[0][1] = c*0.20f;
    
    Coordinate[1][0] = c*0.12f; // 0.12
    Coordinate[1][1] = c*0.20;
    
    Coordinate[2][0] = c*0.04; // -0.12
    Coordinate[2][1] = c*0.20; // 0.12
    
    Coordinate[3][0] = c*(-0.04f); // 0.04
    Coordinate[3][1] = c*0.20f; // 0.04
    
    Coordinate[4][0] = c*(-0.12f); // -0.04
    Coordinate[4][1] = c*0.20;  // 0.04
    
    Coordinate[5][0] = 0.0f; // 0.0
    Coordinate[5][1] = 0.0f;
    
    An0[0]=0.30f; 
    An0[1]=-0.48f; 
    An0[2]=An1[2]=-0.16f; 
    An1[0]=-0.30f; 
    An1[1]=0.48f;
    
    Zero[0] = Zero[1] = Zero[2] = 0.0f;
    
    Rilascio[0] = 0.0;
	Rilascio[1] = 0.0f;
	Rilascio[2] = -1.0;
	
	// Per adesso inutile
	Minatore[0] = 1.0f;
	Minatore[1] = -2.0f;
	Minatore[2] = 0.0f;
	
	float data[13];
	api.getMySphState( data );
	quaternion[ 0 ] = data[ 6 ];
	quaternion[ 1 ] = data[ 7 ];
	quaternion[ 2 ] = data[ 8 ];
	quaternion[ 3 ] = data[ 9 ];
}

void loop()
{
    api.getMyZRState(Mystate); 
	
	for (int i=0; i<3; i++)
	{
	    Mypos[i] = Mystate[i];
	    Myvel[i] = Mystate[i+3];
	    Myatt[i] = Mystate[i+6];
	    Myw[i] = Mystate[i+9];
	    MyVirPos[i] = Mypos[i] + 2 * Myvel[i]; // posizione un secondo piu' tardi
	}
	
	//DEBUG(("Start case %d", n ));
	
	//DEBUG(( "Attitude quaternion vector x:%f y:%f z:%f ?:%f", quaternion[0], quaternion[1], quaternion[2], quaternion[3] ));
	
	if( n == -1 )
	{
	    GetSquareInS( Coordinate[viaggio] );
	    n = 0;
	}
	
	//if( n > -1 )
	//    ReachPos( S );
	    
	if( n == 0 )
	    if( mettiti_in_condizione_di_drillare() )
    	    n++;
	
	if(( n > 0) && ( n <= 3 ) && ( game.getNumSamplesHeld() != 5 ))
	    if( ruota_e_tira_su_i_minerali() )
	        n++;
	
	if( n == 4 )
	    if( game.getNumSamplesHeld() != 5 )
	    {
	        n = -1;
	        viaggio++;
	    }
    
    float m[2];
	m[0] = S[0];
	m[1] = S[1];	
    
	if(( n == 5 ) || ( game.getNumSamplesHeld() == 5 ) || game.isGeyserHere( m ) )
	{
	    contatorePerLaRotation = 0;
	    n = 5;
	    cambia_S_per_base_station();
	    if( rilascia_i_campioni_al_base_station() )
	        n = 6;
	    ReachPos( S );
	}
	
	if( n == 6 )
	{
	    n = -1;
	    viaggio++;
	}
	
	if(  game.getDrillError() )
	    game.stopDrill();
	    
	if((( api.getTime() > 165 ) || ( game.getFuelRemaining() < 0.18f )) && ( game.getNumSamplesHeld() > 0 ) )
	{
	    cambia_S_per_base_station();
	    n = 5;
	    ReachPos( S );
	    contatorePerLaRotation = 0;
	}
	
	
	//DEBUG(("End case %d", n ));
}

//end page main----------------------------------------------------------------------------------------------------------------------------
//begin page function----------------------------------------------------------------------------------------------------------------------
inline void GetSquareInS( float *object )
{
    int square[3];
    object[2] = 0.345f;
    game.pos2square(object, square); //Trovo il quadratino corrispondente alla posizione che voglio andare
	game.square2pos(square, S); //Mi da la posizione del quadrato in cui devo andare 
	S[2] = 0.345f;
}

inline bool Rotate( int n )
{
    DEBUG(("Contatore Per La Rot %d", contatorePerLaRotation ));
    float obb[3];
    obb[0] = 0.0f;
    obb[1] = 0.0f;
    
    ( contatorePerLaRotation <= (2 * n )) ? (obb[2] = 100) : (obb[2] = -100);
    
    if( n == 14 )
        obb[2] = 0;
        
    api.setAttRateTarget( obb );
    
    if( (contatorePerLaRotation > 3 ) && ( mathVecMagnitude( Myw, 3 ) < 0.09 ) )//( temp == 6 )
    {
        contatorePerLaRotation = 0;
        return true;
    }
    
    contatorePerLaRotation++;
    return false;
}

inline void cambia_S_per_base_station()
{
    for( int i = 0; i < 3; i++ )
        S[i] = Mypos[i];
    mathVecNormalize( S, 3 );
    for( int i = 0; i < 3; i++ )
        S[i] *= 0.19; // 74/75 secs (BEST), 20->79 secs  (for 5 samples without geyser)
    //S[1] = -S[1];
    S[0] = 0.0f;
    S[1] = 0.0f;
    S[2] = 0.21 * Sign( Mypos[2] );
    ReachPos( S );
}
//end page function------------------------------------------------------------------------------------------------------------------------
//begin page basic-------------------------------------------------------------------------------------------------------------------------
float Distance(float Point[3], float pos[3]){
    float dis[3];
    mathVecSubtract(dis, Point, pos, 3);
    return mathVecMagnitude(dis, 3); 
}

inline int Sign (float val)
{
    if (val>0) return 1;
    else return -1;
}

/*
inline void ReachPos(float *object, float a = 0.0075f) //from 0.008
{
    //Formula FISICA Vf^2 = Vi^2 + 2*a*(Sf-Si)        (formula for FinalSpeed  (Vf=Final Speed)
    // (Vi=initial Speed) (a=acceleration)
    float v[3];
    for( int i = 0; i< 3; i++ )
        v[i] = ((Sign(object[i]-MyVirPos[i])) * sqrtf (fabsf(powf(Myvel[i], 2) - (fabsf(2*a*(object[i]-MyVirPos[i]))))));
    
    if( ( Distance( Mypos, object ) > 0.18 ) && ( contatorePerLaRotation == 0 ) )
        api.setVelocityTarget(v);
    else
        api.setPositionTarget( object );
}
*/

void LookAt(float* target)
{
    float delta[3];
    mathVecSubtract(delta, Myatt, target, 3);
    mathVecNormalize(delta, 3);
    api.setAttitudeTarget(delta);
}


/*
void LookAt(float* target){
    float baseQuat[4],quat[4],attVec[3],myLong[13];
    api.getMySphState(myLong);
    mathVecSubtract(attVec, target, Mypos, 3);
    mathVecNormalize(attVec, 3);
    for (int i=0; i<4; i++) baseQuat[i] = myLong[i+6];
    api.attVec2Quat( Myatt, attVec, baseQuat, quat );
    api.setQuatTarget(quat);
}
*/

//end page basic---------------------------------------------------------------------------------------------------------------------------
//begin page complex-----------------------------------------------------------------------------------------------------------------------
#define condizioni_per_drillare ((mathVecMagnitude(Myvel, 3) < 0.004) && (mathVecMagnitude(Myw, 3) < 0.04) && ( Mypos[2] < 0.365) && ( Mypos[2] > 0.33))
#define condizioni_per_salvare ((mathVecMagnitude(Myvel, 3) < 0.01) && (mathVecMagnitude(Myw, 3) < 0.04) && ( Distance( Mypos, Zero) < 0.24 ))

inline bool mettiti_in_condizione_di_drillare()
{
    api.setQuatTarget( quaternion );
    
    if ( game.getDrillEnabled() )
        game.stopDrill();
    
    ReachPos( S );
    
    if( condizioni_per_drillare )
    {
        game.startDrill(); //if ( !game.getDrillEnabled())
        return true;
    }
    
    return false;
}

inline bool ruota_e_tira_su_i_minerali()
{
    ReachPos( S );
    
    // Caso in cui si interrompe di trivellare: bisogna riniziare il giro
    if ( !game.getDrillEnabled() )
    {
        //game.startDrill();
        return true;
        
    }
    
    Rotate( 3 );
    
    ReachPos( S );
    
    //api.setVelocityTarget( Zero );
    //ReachPos( S );
    if( game.checkSample() )
    {
        int q = game.pickupSample();  //si puÃ² richiamare una volta sola!! Quindi dentro la variabile
        //if(( q != -1 ) && ( q != -2))
        //{
            //contatorePerLaRotation = 0;
            //return true;
        //}
        
        
        //contatorePerLaRotation = 0;
        return true;
    }
    return false;
}

inline bool rilascia_i_campioni_al_base_station()
{
    if ( game.getDrillEnabled() )
        game.stopDrill();
        
    api.setAttitudeTarget( Rilascio );
    if( Distance( Mypos, Zero ) < 0.24 )
    {
        if( condizioni_per_salvare )
            if( game.atBaseStation() )
            {
                game.dropSample(0);
                game.dropSample(1);
                game.dropSample(2);
                game.dropSample(3);
                game.dropSample(4);
                api.setAttitudeTarget( Minatore ); // intenzionale
                return true;
            }
    }
    return false;
}
//end page complex-------------------------------------------------------------------------------------------------------------------------
//begin page deprecated--------------------------------------------------------------------------------------------------------------------
/*
inline double OldReachAtt(float *object, int &rotDirection)
{
    float obj[3];
	mathVecSubtract( obj, Myatt, object, 3 );
	mathVecNormalize( obj, 3 );
	
	float a = 0.1;//0.15 ricavato sperimentalmente
	float d = atan2f( object[0], object[1] ) - atan2f( Myatt[0], Myatt[1] );
    
    if( d < 0 )
        d += (2 * 3.14);
    
    if( ( d < 2.1 ) ) // aprox 25 deg
    {
        d = 0;
        rotDirection = 0;
        DEBUG(("SLOWER"));
    }
    
    float v[3];
    v[0] = 0;
    v[1] = 0;
    v[2] = Sign(d) * (sqrtf ( fabsf(powf( Myw[2], 2) + (fabsf( 2 * a * d ))) ));
    //v[2] = 100;
    DEBUG(("DELTA ANGLE %f", d));
    //if( fabs(d) < 2.3 )
    //    v[2] = -fabs(v[2]);
    
    if( rotDirection == 0 )
        api.setAttitudeTarget( obj );
    else
        api.setAttRateTarget(v);
    return d;
}

inline bool OldRotate( float* obb )
{ //rotationDirection era globale
    
    DEBUG(("S %d", temp ));
    switch( temp )
    {
        case 0:
            for( int i = 0; i< 3; i++ )
                obb[i] = -Myatt[i];
            obb[1] += 0.1;
            temp += 1;
            break;
            
        case 1:
            if( OldReachAtt(obb, rotationDirection) < 0.1 )
            {
                temp = 0;
                rotationDirection = 1;
                return true;
            }
            break;
    }
    return false;
}
*/


void ReachPos(float pos[3] )
{
    float distance[3];
    
    mathVecSubtract(distance, pos, Mypos, 3);
    float mag = mathVecMagnitude(distance, 3);
    
    if (mag < 0.03f)
    {
        api.setPositionTarget(pos);
        return;
    }
    
    for (int i = 0; i < 3; i++) distance[i] *= ((mag > 0.5f) ? 0.2f : (mag * mag * 2.6f + 0.07f)); // Find best scale mag*mag*2.6 + 0.072f best for now
    
    
    //float m[2];
	//m[0] = Mypos[0];
	//m[1] = Mypos[1];
    //for (int i = 0; i < 3; i++) distance[i] *= (((mag > 0.5f) || game.isGeyserHere( m )) ? 0.2f : (mag * mag * 1.1f + 0.09f)); // Find best scale mag*mag*2.6 + 0.07f best for now
    // 2.1, 0.08 // 1.2 0.1
    
    
    
    int mg = mathVecMagnitude(distance, 3);
    if (mg > 0.05f) for (int i = 0; i < 3; i++) distance[i] *= 0.05f/mg;
    //if(mag < 0.5f) DEBUG(("Acc: %f", (mag / 0.9f + 0.02f) ));
    
    api.setVelocityTarget(distance);
}



//end page deprecated----------------------------------------------------------------------------------------------------------------------
